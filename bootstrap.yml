---
- name: Bootstrap
  hosts: all
  become: yes
  become_user: root

  tasks:
    - name: Set Hostname
      hostname: name={{ pi_name }}
    
    - name: Fix Hostname in hosts file
      lineinfile:
        path: /etc/hosts
        regexp: "127.0.1.1"
        line: "127.0.1.1	{{ pi_name }}"
        state: present

    - name: Set Timezone
      community.general.timezone: name={{ timezone }}

    - name: Setup Admin group
      group:
        name: admin
        state: present

    - name: Create new user
      user: 
        name: "{{ ansible_user }}"
        password: "{{ ansible_ssh_pass |password_hash('md5') }}"
        shell: /bin/bash
        groups: admin
        update_password: on_create

    - name: Add group to sudoers
      copy: 
        dest: /etc/sudoers.d/admin-group-nopasswd
        content: "%admin ALL=(ALL) NOPASSWD:ALL"
        force: yes
        group: root
        owner: root
        mode: 0440
        follow: yes

    - name: Ensure autostart user is not member of sudo
      user:
        name: "{{ autostart_user }}"
        shell: /bin/bash
        group: "{{ autostart_user }}"
        groups: audio,video,plugdev,games,users,input
        append: no
      
    - name: Add authorized_keys for the user
      authorized_key: user={{ ansible_user }} key="{{ lookup('file', item) }}"
      with_items:
        - "{{ user_public_keys }}"

    - name: Disallow root SSH access
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "PermitRootLogin"
        line: "PermitRootLogin no"
        state: present
      notify: Restart ssh

    - name: Disallow password authentication
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "PasswordAuthentication"
        line: "PasswordAuthentication no"
        state: present
      notify: Restart ssh

    - name: Flush handlers at this point
      meta: flush_handlers

    - name: Install required packages
      apt: 
        name: "{{ required_packages }}"
  
    - name: Ensure locales are generated
      locale_gen:
        name: "{{ item }}"
        state: present
      with_items:
        - "{{ locales }}"

    - name: Set up firewall
      ufw:
        rule: allow
        port: "{{ item }}"
      with_items:
        - "{{ ufw_allowed_ports }}"

    - name: Enable ufw/firewall
      ufw: 
        state: enabled

#    - name: HDMI force hotplug
#      lineinfile:
#        path: /boot/config.txt
#        regexp: "hdmi_force_hotplug"
#        line: "hdmi_force_hotplug=1"
#        state: present
#      notify: Reboot
#
#    - name: HDMI normal mode
#      lineinfile:
#        path: /boot/config.txt
#        regexp: "hdmi_drive"
#        line: "#hdmi_drive=2"
#        state: present
#      notify: Reboot
#
#    - name: HDMI group
#      lineinfile:
#        path: /boot/config.txt
#        regexp: "hdmi_group"
#        line: "hdmi_group=2"
#        state: present
#      notify: Reboot
#
#    - name: HDMI mode FullHD
#      lineinfile:
#        path: /boot/config.txt
#        regexp: "hdmi_mode"
#        line: "hdmi_mode=82"
#        state: present
#      notify: Reboot
#
#    - name: Underclock CPU to keep it from cooking
#      lineinfile:
#        path: /boot/config.txt
#        regexp: "arm_freq"
#        line: "arm_freq=700"
#        state: present
#      notify: Reboot

  handlers:
    - name: Restart ssh
      service: name=ssh state=restarted

    - name: Reboot
      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      ignore_errors: true
